{"version":3,"sources":["util/Constants.jsx","service/TaskDataService.jsx","component/PrioDropdown.jsx","component/DateTimePicker.jsx","component/TaskComponent.jsx","component/ListTasksComponent.jsx","component/TaskStackerApp.jsx","App.js","reportWebVitals.js","index.js"],"names":["Constants","axios","get","TASK_API_URL","taskId","task","console","log","JSON","stringify","put","post","delete","PrioDropdown","props","handleSelect","e","setState","prio","onSelectPrio","state","DropdownButton","id","title","onSelect","this","Dropdown","Item","eventKey","Component","DateTimePicker","handleDateSelect","dt","zuluDate","toISOString","startDate","onSelectDate","initDate","Date","bind","thisDate","onChange","selected","showTimeSelect","dateFormat","TaskComponent","handleTaskNameChange","val","taskName","target","value","handleDurationHoursChange","durationHours","handlePercentCompleteChange","percentComplete","handlePerceivedImportance","perceivedImportance","parseInt","handleBusinessImportance","businessImportance","handleStartDate","handleDueDate","dueDate","match","params","validate","onSubmit","TaskDataService","retrieveTask","then","response","data","values","createTask","history","push","updateTask","errors","validateInteger","testVal","minVal","maxVal","undefined","Number","isInteger","parseFloat","isNaN","classname","initialValues","validateOnChange","validateOnBlur","enableReinitialize","className","type","name","disabled","component","style","ListTasksComponent","tasks","message","refreshTasks","addTaskClicked","updateTaskClicked","deleteTaskClicked","completeTaskClicked","retrieveAllTasks","loadedTasks","sort","compareTasks","task1","task2","workday_count","start","end","first","clone","endOf","last","startOf","days","diff","wfirst","day","wlast","Math","floor","work_hours_1","moment","work_hours_2","percent_of_remaining_time_1","percent_of_remaining_time_2","weight_task_1","weight_task_2","deleteTask","completeTask","map","format","onClick","TaskStackerApp","path","exact","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7145a6b3.chunk.js","sourcesContent":["\nclass Constants {\n\n    static get TASK_API_URL() {\n        return '/api';  //use for building to copy to springboot app\n        //return 'http://localhost:9001/api';  //use for development\n      }\n\n}\n\nexport default Constants","import axios from 'axios'\nimport Constants from '../util/Constants'\n\n\nclass TaskDataService {\n\n    componentDidMount() {\n        //this.refreshCourses();\n    }\n\n    retrieveAllTasks() {\n        //http://localhost:8080/api/tasks/search/findTasksByPrio\n        //TODO - Need a method to not return completed tasks.\n        //var return_value = axios.get(`${Constants.TASK_API_URL}/tasks/search/findTasksByPrio`);\n        var return_value = axios.get(`${Constants.TASK_API_URL}/task_actions/find_all_not_complete`);\n        \n        return return_value;\n    }\n    \n    retrieveTask(taskId){\n        var return_value = axios.get(`${Constants.TASK_API_URL}/tasks/` + taskId);\n        return return_value;\n    }\n\n    createTask(task){\n        console.log(\"creating task: \" + JSON.stringify(task));\n        return axios.put(`${Constants.TASK_API_URL}/tasks/${task.taskId}`, task);\n    }\n\n    updateTask(task){\n        console.log(\"updating task: \" + JSON.stringify(task));\n        return axios.post(`${Constants.TASK_API_URL}/tasks/`, task);\n    }\n\n    deleteTask(taskId){\n        return axios.delete(`${Constants.TASK_API_URL}/tasks/${taskId}`);\n    }\n\n    completeTask(taskId){\n        return axios.get(`${Constants.TASK_API_URL}/task_actions/complete_task/${taskId}`);\n    }\n\n}\n\nexport default new TaskDataService()","import React, { Component } from 'react'  //useState\nimport { DropdownButton, Dropdown } from 'react-bootstrap';\n\n\nclass PrioDropdown extends Component \n{\n\n    constructor(props) {\n        super(props);\n        \n        this.state = {\n            prio: 0\n        }\n    }\n\n    handleSelect = (e) => {\n        console.log(e)\n        this.setState({prio: e});\n        this.props.onSelectPrio(e); \n    }\n\n    render() {\n        return (\n            <DropdownButton\n                id=\"dropdown-basic-button\" \n                title=\"Select Priority\"\n                onSelect={this.handleSelect}>\n                <Dropdown.Item eventKey=\"1\">1</Dropdown.Item>\n                <Dropdown.Item eventKey=\"2\">2</Dropdown.Item>\n                <Dropdown.Item eventKey=\"3\">3</Dropdown.Item>\n                <Dropdown.Item eventKey=\"4\">4</Dropdown.Item>\n                <Dropdown.Item eventKey=\"5\">5</Dropdown.Item>\n                <Dropdown.Item eventKey=\"6\">6</Dropdown.Item>\n                <Dropdown.Item eventKey=\"7\">7</Dropdown.Item>\n                <Dropdown.Item eventKey=\"8\">8</Dropdown.Item>\n                <Dropdown.Item eventKey=\"9\">9</Dropdown.Item>\n                <Dropdown.Item eventKey=\"10\">10</Dropdown.Item>\n            </DropdownButton>\n        )\n    }\n\n}\n\nexport default PrioDropdown","import React, { Component } from 'react'; \nimport DatePicker from 'react-datepicker';\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nclass DateTimePicker extends Component \n{\n    constructor(props) {\n        super(props);\n\n        let initDate = new Date();\n        if (this.props.zuluDate)\n        {\n            initDate = new Date(this.props.zuluDate);\n        }\n\n        this.state = {\n            zuluDate: this.props.zuluDate,\n            startDate: initDate\n        }\n\n        this.handleDateSelect = this.handleDateSelect.bind(this)\n    }\n\n    handleDateSelect = (dt) => {\n        this.setState({zuluDate: dt.toISOString(), startDate: dt});  //need to set zuluDate to make sure this.props.zuluDate updates properly\n        this.props.onSelectDate(dt);\n    }\n\n    render() {\n        let thisDate = this.state.startDate  \n        if (this.props.zuluDate)\n        {\n            thisDate = new Date(this.props.zuluDate)\n        }\n\n        return (\n            <div>\n                <DatePicker\n                    onChange={this.handleDateSelect}\n                    onSelect={this.handleDateSelect}\n                    selected={thisDate}\n                    showTimeSelect\n                    dateFormat=\"MMMM d, yyyy h:mm aa\"\n                />\n            </div>\n        )\n    }\n\n}\n\nexport default DateTimePicker","import React, { Component } from 'react'\nimport TaskDataService from '../service/TaskDataService'\nimport PrioDropdown from './PrioDropdown'\nimport DateTimePicker from  './DateTimePicker'\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\n\nclass TaskComponent extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            id: parseInt(this.props.match.params.id),\n            task: {}\n        }\n\n        this.handleTaskNameChange = this.handleTaskNameChange.bind(this)\n        this.handleDurationHoursChange = this.handleDurationHoursChange.bind(this)\n        this.handlePerceivedImportance = this.handlePerceivedImportance.bind(this)\n        this.handleBusinessImportance = this.handleBusinessImportance.bind(this)\n        this.handleStartDate = this.handleStartDate.bind(this)\n        this.handleDueDate = this.handleDueDate.bind(this)\n        this.validate = this.validate.bind(this)\n\n        this.onSubmit = this.onSubmit.bind(this)\n    }\n\n    componentDidMount() {\n        if (this.state.id === -1) {\n\n            let initDate = (new Date()).toISOString();\n            this.setState({\n                startDate: initDate,\n                dueDate: initDate\n            });\n\n            return;\n        }\n\n        TaskDataService.retrieveTask(this.state.id)\n            .then(response => this.setState({\n                id: response.data.taskId,\n                taskName: response.data.taskName,\n                durationHours: response.data.durationHours,\n                percentComplete: response.data.percentComplete,\n                startDate: response.data.startDate,\n                dueDate: response.data.dueDate,\n                perceivedImportance: response.data.perceivedImportance,\n                businessImportance: response.data.businessImportance,\n\n                task: response.data\n            }))\n    }\n\n    onSubmit(values) {\n        let task = {\n            taskId: this.state.id,\n            taskName: values.taskName,\n            durationHours: values.durationHours,\n            percentComplete: values.percentComplete,\n            startDate: values.startDate,\n            dueDate: values.dueDate,\n            perceivedImportance: values.perceivedImportance,\n            businessImportance: values.businessImportance\n        }\n\n        console.log(\"submitting task to DB values: \" + JSON.stringify(values));\n        console.log(\"submitting task to DB task: \" + JSON.stringify(task));\n\n        if (this.state.id === -1) {\n            TaskDataService.createTask(task)\n                .then(() => this.props.history.push('/tasks'))\n        } else {\n            TaskDataService.updateTask(task)\n                .then(() => this.props.history.push('/tasks'))\n        }\n    }\n\n    handleTaskNameChange = (val) => {\n        let taskName = this.state.taskName;\n        taskName = val.target.value\n        this.setState({taskName})\n    }\n\n    handleDurationHoursChange = (val) => {\n        let durationHours = this.state.durationHours;\n        durationHours = val.target.value\n        this.setState({durationHours})\n    }\n\n    handlePercentCompleteChange = (val) => {\n        let percentComplete = this.state.percentComplete;\n        percentComplete = val.target.value\n        this.setState({percentComplete})\n    }\n\n    handlePerceivedImportance = (prio) => {\n        let perceivedImportance = this.state.perceivedImportance;\n        perceivedImportance = parseInt(prio)\n        this.setState({perceivedImportance})\n    }\n\n    handleBusinessImportance = (prio) => {\n        let businessImportance = this.state.businessImportance;\n        businessImportance = parseInt(prio)\n        this.setState({businessImportance})\n    }\n\n    handleStartDate = (dt) => {\n        let startDate = this.state.startDate;\n        startDate = dt.toISOString();\n        this.setState({startDate})\n    }\n\n    handleDueDate = (dt) => {\n        let dueDate = this.state.dueDate;\n        dueDate = dt.toISOString();\n        this.setState({dueDate})\n    }\n\n    validate(values) {\n        let errors = {}\n\n        let validateInteger = (testVal, minVal, maxVal) => {\n            if (testVal === null || testVal === undefined) {return false;}\n            if (!Number.isInteger(parseFloat(testVal))) {return false;}\n            if (parseInt(testVal) < minVal || parseInt(testVal) > maxVal) {return false;}\n            return true;\n        }\n\n        if (!values.taskName) {\n            errors.taskName = 'Enter a Task Name'\n        }\n        else if (!values.durationHours || isNaN(values.durationHours)) {\n            errors.durationHours = 'Enter a Number for Duration Hours'\n        }\n        else if (!validateInteger(values.percentComplete, 0, 100)) {\n            errors.percentComplete = 'Enter a Number between 0 and 100 for Percent Complete'\n        }\n        else if (!validateInteger(values.perceivedImportance, 0, 10)) {\n            errors.perceivedImportance = 'Enter an Integer between 0 and 10 for Perceived Importance'\n        }\n        else if (!validateInteger(values.businessImportance, 0, 10)) {\n            errors.businessImportance = 'Enter an Integer between 0 and 10 for Business Importance'\n        }\n\n        //console.log(\"errors: \" + JSON.stringify(errors));\n        return errors\n    }\n\n    render() {\n        return (\n            <div>\n                <h3>Task</h3>\n\n                <div classname=\"container\">\n                    <Formik\n                        initialValues={{id: this.state.id, \n                                        taskName:this.state.taskName, \n                                        durationHours: this.state.durationHours, \n                                        percentComplete: this.state.percentComplete,\n                                        startDate: this.state.startDate, \n                                        dueDate: this.state.dueDate, \n                                        perceivedImportance: this.state.perceivedImportance, \n                                        businessImportance: this.state.businessImportance}}\n                        onSubmit={this.onSubmit}\n                        validateOnChange={false}\n                        validateOnBlur={false}\n                        validate={this.validate}\n                        enableReinitialize={true}\n                    >\n                        {\n                            (errors) => (\n                                <Form>\n                                    <fieldset className=\"form-group\">\n                                        <label>Id</label>\n                                        <Field className=\"form-control\" type=\"text\" name=\"id\" disabled />\n                                    </fieldset>\n                                    <fieldset className=\"form-group\">\n                                        <label>TaskName</label>\n                                        <Field className=\"form-control\" type=\"text\" name=\"taskName\" onChange={this.handleTaskNameChange}/>\n                                        <ErrorMessage name=\"taskName\" component=\"div\" className=\"alert alert-warning\" />\n                                    </fieldset>\n                                    <fieldset className=\"form-group\">\n                                        <label>durationHours</label>\n                                        <Field className=\"form-control\" type=\"text\" name=\"durationHours\" onChange={this.handleDurationHoursChange}/>\n                                        <ErrorMessage name=\"durationHours\" component=\"div\" className=\"alert alert-warning\" />\n                                    </fieldset>\n                                    <fieldset className=\"form-group\">\n                                        <label>Percent Complete</label>\n                                        <Field className=\"form-control\" type=\"text\" name=\"percentComplete\" onChange={this.handlePercentCompleteChange}/>\n                                        <ErrorMessage name=\"percentComplete\" component=\"div\" className=\"alert alert-warning\" />\n                                    </fieldset>\n                                    <fieldset className=\"form-group\">\n                                        <label>Start Date</label>\n                                        <DateTimePicker zuluDate={this.state.startDate} onSelectDate={this.handleStartDate}/>\n                                    </fieldset>\n                                    <fieldset className=\"form-group\">\n                                        <label>Due Date</label>\n                                        <DateTimePicker zuluDate={this.state.dueDate} onSelectDate={this.handleDueDate}/>\n                                    </fieldset>\n                                    <fieldset className=\"form-group\">\n                                        <label>Perceived Importance</label>\n                                        <fieldset className=\"form-inline\">\n                                            <Field className=\"form-control\" type=\"text\" name=\"perceivedImportance\" />\n                                            <PrioDropdown onSelectPrio={this.handlePerceivedImportance}/>\n                                        </fieldset>\n                                        <ErrorMessage name=\"perceivedImportance\" component=\"div\" className=\"alert alert-warning\" />\n                                    </fieldset>\n                                    <fieldset className=\"form-group\">\n                                        <label>Business Importance</label>\n                                        <fieldset className=\"form-inline\">\n                                            <Field className=\"form-control\" type=\"text\" name=\"businessImportance\" />\n                                            <PrioDropdown onSelectPrio={this.handleBusinessImportance} style=\"display: inline-block\"/>\n                                        </fieldset>\n                                        <ErrorMessage name=\"businessImportance\" component=\"div\" className=\"alert alert-warning\" />\n                                    </fieldset>\n\n                                    <button className=\"btn btn-success\" type=\"submit\">Save</button>\n                                </Form>\n                            )\n                        }\n                    </Formik>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default TaskComponent","import React, { Component } from 'react';\nimport TaskDataService from '../service/TaskDataService';\nimport moment from 'moment'\n\n\nclass ListTasksComponent extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            tasks: [],\n            message: null\n        }\n\n        this.refreshTasks = this.refreshTasks.bind(this)\n        this.addTaskClicked = this.addTaskClicked.bind(this)\n        this.updateTaskClicked = this.updateTaskClicked.bind(this)\n        this.deleteTaskClicked = this.deleteTaskClicked.bind(this)\n        this.completeTaskClicked = this.completeTaskClicked.bind(this)\n    }\n    \n    componentDidMount() {\n        this.refreshTasks();\n    }\n\n    refreshTasks() {\n        TaskDataService.retrieveAllTasks()\n            .then(\n                response => {\n                    //let loadedTasks = response.data._embedded.tasks;  //works with default repo\n                    console.log(response.data)\n                    let loadedTasks = response.data;  //works with default repo\n                    loadedTasks.sort(this.compareTasks)\n                    this.setState({tasks: loadedTasks});\n                }\n            )\n    }\n\n    compareTasks(task1, task2)\n    {\n        let workday_count = (start,end) => {\n            let first = start.clone().endOf('week'); // end of first week\n            let last = end.clone().startOf('week'); // start of last week\n            let days = last.diff(first,'days') * 5 / 7; // this will always multiply of 7\n            let wfirst = first.day() - start.day(); // check first week\n            if(start.day() === 0) --wfirst; // -1 if start with sunday \n            let wlast = end.day() - last.day(); // check last week\n            if(end.day() === 6) --wlast; // -1 if end with saturday\n            return wfirst + Math.floor(days) + wlast; // get the total\n          } //              ^ EDIT: if days count less than 7 so no decimal point\n\n        let work_days_1 = workday_count(moment(), moment(task1.dueDate));\n        let work_days_2 = workday_count(moment(), moment(task2.dueDate));\n        let work_hours_1 = work_days_1 * 8.0;\n        let work_hours_2 = work_days_2 * 8.0;\n\n        let percent_of_remaining_time_1 = 100.0 * (1-task1.percentComplete/100.0)*parseFloat(task1.durationHours) / work_hours_1;\n        let percent_of_remaining_time_2 = 100.0 * (1-task2.percentComplete/100.0)*parseFloat(task2.durationHours) / work_hours_2;\n\n        //console.log(\"percent_of_remaining_time_\" + task1.taskId + \": \" + percent_of_remaining_time_1);\n        //console.log(\"percent_of_remaining_time_\" + task2.taskId + \": \" + percent_of_remaining_time_2);\n\n        let weight_task_1 = percent_of_remaining_time_1 + parseFloat(task1.perceivedImportance) + parseFloat(task1.businessImportance);\n        let weight_task_2 = percent_of_remaining_time_2 + parseFloat(task2.perceivedImportance) + parseFloat(task2.businessImportance);\n\n        //console.log(\"weight_task_\" + task1.taskId + \": \" + weight_task_1);\n        //console.log(\"weight_task_\" + task2.taskId + \": \" + weight_task_2);\n\n         if (task1.percentComplete == 100 && task2.percentComplete < 100) {\n             return 1;\n         }\n\n         if (task1.percentComplete < 100 && task2.percentComplete == 100) {\n             return -1;\n         }\n\n        if(weight_task_1 > weight_task_2)\n        {\n            return -1;\n        }\n        else if(weight_task_1 < weight_task_2)\n        {\n            return 1;\n        }\n        return 0;\n    }\n\n    updateTaskClicked(taskId) {\n        this.props.history.push(\"/tasks/\" + taskId);\n    }\n\n    deleteTaskClicked(taskId) {\n        TaskDataService.deleteTask(taskId)\n            .then(() => {\n                this.props.history.push('/tasks');\n                this.refreshTasks();\n            })\n    }\n\n    completeTaskClicked(taskId) {\n        TaskDataService.completeTask(taskId)\n            .then(() => {\n                this.props.history.push('/tasks');\n                this.refreshTasks();\n            })\n    }\n\n    addTaskClicked() {\n        this.props.history.push(`/tasks/-1`)\n    }\n\n    render(props) {\n        return (\n            <div className=\"container\">\n                <h3>All Tasks</h3>\n                <table className=\"table\">\n                    <thead>\n                        <tr>\n                            {/* <th>Task Id</th> */}\n                            <th>Task Name</th>\n                            <th>Duration</th>\n                            <th>% Complete</th>\n                            {/* <th>Start Date</th> */}\n                            <th>Due Date</th>\n                            <th>Perceived Importance</th>\n                            <th>Business Importance</th>\n                            <th>Update</th>\n                            <th>Complete</th>\n                            <th>Delete</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {\n                            this.state.tasks.map(\n                                (task) => \n                                    <tr key={task.taskId}>\n                                        {/* <td>{task.taskId}</td> */}\n                                        <td>{task.taskName}</td>\n                                        <td>{task.durationHours} Hours</td>\n                                        <td>{task.percentComplete}%</td>\n                                        {/* <td>{moment(task.startDate).format('MMM Do YYYY h:mm a')}</td> */}\n                                        <td>{moment(task.dueDate).format('MMM Do YYYY h:mm a')}</td>\n                                        <td>{task.perceivedImportance}</td>\n                                        <td>{task.businessImportance}</td>\n                                        <td><button className=\"btn btn-success\" onClick={() => this.updateTaskClicked(task.taskId)}>Update</button></td>\n                                        <td><button className=\"btn btn-success\" onClick={() => this.completeTaskClicked(task.taskId)}>Complete</button></td>\n                                        <td><button className=\"btn btn-warning\" onClick={() => this.deleteTaskClicked(task.taskId)}>Delete</button></td>\n                                    </tr>\n                            )\n                        }\n                    </tbody>\n                </table>\n                <div className=\"row\">\n                    <button className=\"btn btn-success\" onClick={this.addTaskClicked}>Add</button>\n                </div>\n            </div>\n        )\n    }\n\n}\n\nexport default ListTasksComponent","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport TaskComponent from './TaskComponent';\nimport ListTasksComponent from './ListTasksComponent';\n\n\nclass TaskStackerApp extends Component {\n    render() {\n        return (\n            <Router>\n                <>\n                    <h1>TaskStackerApp</h1>\n                    <Switch>\n                        <Route path=\"/\" exact component={ListTasksComponent} />\n                        <Route path=\"/tasks\" exact component={ListTasksComponent} />\n                        <Route path=\"/tasks/:id\" component={TaskComponent} />\n                    </Switch>\n                </>\n            </Router>\n        )\n    }\n}\n\nexport default TaskStackerApp","import React, { Component } from 'react';\nimport './App.css';\nimport TaskStackerApp from './component/TaskStackerApp';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"container\">\n        <TaskStackerApp />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}